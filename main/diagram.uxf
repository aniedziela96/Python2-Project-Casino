<diagram program="umletino" version="15.1"><zoom_level>10</zoom_level><help_text>Space for diagram notes</help_text><element><id>UMLClass</id><coordinates><x>670</x><y>1090</y><w>420</w><h>140</h></coordinates><panel_attributes>*Casino*
--
+ file: str
--
+ create_player(name: str, money: int): Player
+ login(): Player
+ start(): None
+ logout(player: Player): None
+ check_tokens(tokens: int, player: Player, blackjack: bool): bool </panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1120</x><y>1060</y><w>210</w><h>190</h></coordinates><panel_attributes>*Player*
--
+ name: str
+ tokens: int
--
+ get_name(): str
+ get_tokens(): int
+ spend_tokens(tokens: int): None
+ add_tokens(tokens: int): None
+ all_in(): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>870</y><w>400</w><h>220</h></coordinates><panel_attributes>*Bingo*
--
+ player: Player
+ gamblers: tuple
+ enter_price: int 
+ winner_prize: int
--
+ __init__(player: Player): None
_+ make_bingo_board(): Board_
+ make_bingo_game(): BingoGame
_+ make_times(number_of_fake_players: int, time: float): float[ ]_
+ pay_prize(): None
+ sum_up(): None
+ start_game(): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>1120</y><w>370</w><h>150</h></coordinates><panel_attributes>*BingoGame*
--
+ bingo_players: tuple
+ boards: Board[ ]
--
+ __init__(bingo_players: tuple, boards: Board[ ]): None
+ get_bingo_players(): tuple
+ check_boards(number: int): None
+ is_bingos(): int[ ]
+ show_players_boards(): None
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>20</x><y>1310</y><w>360</w><h>120</h></coordinates><panel_attributes>*Board*
--
+ columns: list
--
+ __init__(columns: list): None
+ check(number: int): None
+ is_bingo(): bool
+ show(): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>500</x><y>1370</y><w>620</w><h>230</h></coordinates><panel_attributes>*Blackjack*
--
+ croupier: Croupier_bj
+ player: Blackjack_player
+ players_bet: Blackjack_hand
+ bet_money: int
+ bet_number: int
+ deck: Deck
--
+ __init__(croupier: Croupier_bj, bj_player: Blackjack_player, bet_money: int, deck: Deck, bet_number: int)
+ end(player_win: bool): str
+ hit(): str
+ double_down(): str
+ insurance(): str/None
+ split(): str/Blackjack
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>540</x><y>1630</y><w>210</w><h>120</h></coordinates><panel_attributes>*Blackjack_hand*
--
+ score: int
--
+ calculate_score(): None
+ is_pair(): bool
+ split(): tuple</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>850</x><y>1640</y><w>300</w><h>130</h></coordinates><panel_attributes>*Blackjack_player*
--
+ bets: Hand[ ]
--
+ show_bets(): None
+ player_hit(card: list, hand_number = int): None 
+ add_bet(hand: Blackjack_hand): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1180</x><y>1380</y><w>370</w><h>290</h></coordinates><panel_attributes>*Start_blackjack*
--
+ player: Player
+ blackjack_player: Blackjack_player
+ croupier: Croupier_bj
+ deck: Deck
+ bet_money: int
+ tokens_bet: int
+ list_of_games: Blackjack[ ]
--
+ __init__(player: Player, bet_money: int): None
+ deal(): None
+ action(bet_number: int, first: bool): str
+ game_status(hidden: bool): None
+ play_bet(game: Blackjack, split: bool) : None
+ decision(game: Blackjack, if_first: bool): None
+ players_score(): int[ ]
+ final(): None
+ start_game(): None

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1240</x><y>1700</y><w>210</w><h>150</h></coordinates><panel_attributes>*Croupier_bj*
--
+ hand: Blackjack_hand
+ score: int
--
+ draw_cards(cards: list): None
+ show_hidden(): None
+ show_open(): None
+ set_score(): None
+ cropiers_move(deck: Deck): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>690</x><y>690</y><w>360</w><h>220</h></coordinates><panel_attributes>*Races*
--
+ names: tuple
+ tracks: tuple
+ converters: tuple
+ enter_price: int
+ gamblers: tuple
+ player: Player
--
+ __init__(player: Player): None
_+ other_bets(number_of_gamblers: int): str[]_
+ show_other_bets(other_bets: list): None
+ make_bet(): int
+ make_race(): None
+ sum_up(bet: int, winners: int[], other_bets: int[]): None
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1150</x><y>700</y><w>530</w><h>220</h></coordinates><panel_attributes>*Mouse*
--
+ name: str
+ speed: float
+ stamina: float
+ preference: str
+ daily_well_being: float
--
+ __init__(name: str, speed: float, stamina: float, preference: str,  daily_well_being: float)
+ get_name(): str
+ get_speed(): float
+ get_stamina(): float
+ get_preference(): str
+ get_daily_well_being(): float</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>710</x><y>420</y><w>310</w><h>210</h></coordinates><panel_attributes>*Race*
--
+ track: Track
+ runners: Mouse[ ] 
--
+__init__(track: Track, runners: Mouse[ ]): None\
+ get_runners(): Mouse[ ]
+ get_track(): Track
+ start_race(): float[ ]
+ show_full_stats(): None
+ show_random_stats(number_to_show: int): None
_+ get_winners(times: float[ ]): int[ ]_
+ show_results(times: float[ ], winners: int [ ]): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1210</x><y>480</y><w>210</w><h>120</h></coordinates><panel_attributes>*Track*
--
+ track_type: str
+ distance: int
--
+ get_track_type(): str
+ get_distance(): int
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1890</x><y>990</y><w>220</w><h>80</h></coordinates><panel_attributes>*Croupier*
--
--
+ croupier_bet: None
+ croupier_match(last_bet: int): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1840</x><y>1730</y><w>100</w><h>30</h></coordinates><panel_attributes>Rank</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1840</x><y>1790</y><w>100</w><h>30</h></coordinates><panel_attributes>Suit</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1590</x><y>1620</y><w>210</w><h>120</h></coordinates><panel_attributes>*Deck*
--
card_list: tuple[ ]
--
+ shuffle(): None
+ is_empyt(): bool
+ draw(n: int): tuple[ ] </panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1950</x><y>1500</y><w>210</w><h>190</h></coordinates><panel_attributes>*Hand*
--
+ cards: tuple[ ]
--
+ add_cards(cards: tuple[ ]): None
+ is_one_color(): bool
+ is_straight(): bool
+ is_five(): bool
+ rank(): str
+ show_hand(): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>2080</x><y>1210</y><w>270</w><h>190</h></coordinates><panel_attributes>*Poker*
--
+ player: Player
+ poker_player: Poker_human
+ croupier: Croupier
+ bet_money: int
+ last_bet: int
--
+__init__(player: Player): None
+ bet(player: bool, all_in: bool) -&gt; None
+ match(player: bool): None
+ fold(player: bool): None
+ winner(): Poker_human/Croupier</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1890</x><y>1100</y><w>210</w><h>60</h></coordinates><panel_attributes>*Poker_human*
--
--
+ players_bet(tokens: int): bool/str</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1510</x><y>1020</y><w>260</w><h>130</h></coordinates><panel_attributes>*Poker_player*
--
+ hand: Hand
+ hand_rank: None/str
--
+ __init__(nams: str, money: int): None
+ draw_cards(tuple[ ]): None
+ rank(): None
+ show_player_hand(): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1720</x><y>1280</y><w>210</w><h>190</h></coordinates><panel_attributes>*Poker_Game*
--
+ poker_player: Player
+ deck: Deck
+ poker: Poker
--
+__init__(player: Player): None
+ round_one(): None
+ action(): None/str
+ round_two(): None
+ final(): None
+ start_game(): None
_+ end_game(): None_</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>2220</x><y>1440</y><w>260</w><h>270</h></coordinates><panel_attributes>*Winners*
--
+ player1: Poker_player
+ hand1: tuple[ ]
+ player2: Poker_player
+ hand2: tuple[ ]
--
+ winner_high_card(): Poker_player
+ winner_pair(): Poker_player
_+ find_high_card(hand: Hand): tuple_
+ winner_two_pairs(): Poker_player
+ winner_three_of_a_kind(): Poker_player
+ winner_straight(): Poker_player
+ winner_flush(): Poker_player
+ winner_full_house(): Poker_player
+ winner_four_of_a_kind(): Poker_player
+ winner_straigh_flush(): Poker_player
+ winner_royal_flush(): str</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1840</x><y>0</y><w>260</w><h>190</h></coordinates><panel_attributes>*Bet*
--
+ weight: int
+ options: int[ ]
--
+__init__(weight: int, options: int[ ]): None
+ is_option_ok(option: int): bool
+ correct_option(option: int): int
+ winner_prize(tokens: int): int</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1880</x><y>280</y><w>210</w><h>100</h></coordinates><panel_attributes>*Dozens*
--
+ option: int
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>2150</x><y>190</y><w>210</w><h>100</h></coordinates><panel_attributes>*Eighteens*
--
+ option: int
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>2140</x><y>370</y><w>210</w><h>100</h></coordinates><panel_attributes>*EvenOdd*
--
+ option: int
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1890</x><y>430</y><w>210</w><h>130</h></coordinates><panel_attributes>*FourNumbers*
--
+ option: int[ ]
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool
+ is_option_ok(option: int[ ]): bool
+ correst_option(option: int[ ]): int[ ]</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>2150</x><y>20</y><w>210</w><h>100</h></coordinates><panel_attributes>*OneNumber*
--
+ option: int
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>2140</x><y>500</y><w>210</w><h>130</h></coordinates><panel_attributes>*ThreeNumbers*
--
+ option: int[ ]
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool
+ is_option_ok(option: int[ ]): bool
+ correst_option(option: int[ ]): int[ ]</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1900</x><y>620</y><w>210</w><h>130</h></coordinates><panel_attributes>*TwoNumbers*
--
+ option: int[ ]
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool
+ is_option_ok(option: int[ ]): bool
+ correst_option(option: int[ ]): int[ ]</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1600</x><y>300</y><w>210</w><h>190</h></coordinates><panel_attributes>&lt;&lt;Stereotype&gt;&gt;
Package::FatClass
{Some Properties}
--
-id: Long {composite}
_-ClassAttribute: Long_
--
#Operation(i: int): int
/+AbstractOperation()/
--
Responsibilities
-- Resp1
-- Resp2</panel_attributes><additional_attributes></additional_attributes></element></diagram>