<diagram program="umletino" version="15.1"><zoom_level>2</zoom_level><help_text>Space for diagram notes</help_text><element><id>UMLClass</id><coordinates><x>258</x><y>410</y><w>84</w><h>28</h></coordinates><panel_attributes>*Casino*
--
+ file: str
--
+ create_player(name: str, money: int): Player
+ login(): Player
+ start(): None
+ logout(player: Player): None
+ check_tokens(tokens: int, player: Player, blackjack: bool): bool </panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>348</x><y>404</y><w>42</w><h>38</h></coordinates><panel_attributes>*Player*
--
+ name: str
+ tokens: int
--
+ get_name(): str
+ get_tokens(): int
+ spend_tokens(tokens: int): None
+ add_tokens(tokens: int): None
+ all_in(): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>124</x><y>366</y><w>80</w><h>44</h></coordinates><panel_attributes>*Bingo*
--
+ player: Player
+ gamblers: tuple
+ enter_price: int 
+ winner_prize: int
--
+ __init__(player: Player): None
_+ make_bingo_board(): Board_
+ make_bingo_game(): BingoGame
_+ make_times(number_of_fake_players: int, time: float): float[ ]_
+ pay_prize(): None
+ sum_up(): None
+ start_game(): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>124</x><y>416</y><w>74</w><h>30</h></coordinates><panel_attributes>*BingoGame*
--
+ bingo_players: tuple
+ boards: Board[ ]
--
+ __init__(bingo_players: tuple, boards: Board[ ]): None
+ get_bingo_players(): tuple
+ check_boards(number: int): None
+ is_bingos(): int[ ]
+ show_players_boards(): None
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>128</x><y>454</y><w>72</w><h>24</h></coordinates><panel_attributes>*Board*
--
+ columns: list
--
+ __init__(columns: list): None
+ check(number: int): None
+ is_bingo(): bool
+ show(): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>224</x><y>466</y><w>124</w><h>46</h></coordinates><panel_attributes>*Blackjack*
--
+ croupier: Croupier_bj
+ player: Blackjack_player
+ players_bet: Blackjack_hand
+ bet_money: int
+ bet_number: int
+ deck: Deck
--
+ __init__(croupier: Croupier_bj, bj_player: Blackjack_player, bet_money: int, deck: Deck, bet_number: int)
+ end(player_win: bool): str
+ hit(): str
+ double_down(): str
+ insurance(): str/None
+ split(): str/Blackjack
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>232</x><y>518</y><w>42</w><h>24</h></coordinates><panel_attributes>*Blackjack_hand*
--
+ score: int
--
+ calculate_score(): None
+ is_pair(): bool
+ split(): tuple</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>294</x><y>520</y><w>60</w><h>26</h></coordinates><panel_attributes>*Blackjack_player*
--
+ bets: Hand[ ]
--
+ show_bets(): None
+ player_hit(card: list, hand_number = int): None 
+ add_bet(hand: Blackjack_hand): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>360</x><y>468</y><w>74</w><h>58</h></coordinates><panel_attributes>*Start_blackjack*
--
+ player: Player
+ blackjack_player: Blackjack_player
+ croupier: Croupier_bj
+ deck: Deck
+ bet_money: int
+ tokens_bet: int
+ list_of_games: Blackjack[ ]
--
+ __init__(player: Player, bet_money: int): None
+ deal(): None
+ action(bet_number: int, first: bool): str
+ game_status(hidden: bool): None
+ play_bet(game: Blackjack, split: bool) : None
+ decision(game: Blackjack, if_first: bool): None
+ players_score(): int[ ]
+ final(): None
+ start_game(): None

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>372</x><y>532</y><w>42</w><h>30</h></coordinates><panel_attributes>*Croupier_bj*
--
+ hand: Blackjack_hand
+ score: int
--
+ draw_cards(cards: list): None
+ show_hidden(): None
+ show_open(): None
+ set_score(): None
+ cropiers_move(deck: Deck): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>262</x><y>330</y><w>72</w><h>44</h></coordinates><panel_attributes>*Races*
--
+ names: tuple
+ tracks: tuple
+ converters: tuple
+ enter_price: int
+ gamblers: tuple
+ player: Player
--
+ __init__(player: Player): None
_+ other_bets(number_of_gamblers: int): str[]_
+ show_other_bets(other_bets: list): None
+ make_bet(): int
+ make_race(): None
+ sum_up(bet: int, winners: int[], other_bets: int[]): None
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>354</x><y>332</y><w>106</w><h>44</h></coordinates><panel_attributes>*Mouse*
--
+ name: str
+ speed: float
+ stamina: float
+ preference: str
+ daily_well_being: float
--
+ __init__(name: str, speed: float, stamina: float, preference: str,  daily_well_being: float)
+ get_name(): str
+ get_speed(): float
+ get_stamina(): float
+ get_preference(): str
+ get_daily_well_being(): float</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>266</x><y>276</y><w>62</w><h>42</h></coordinates><panel_attributes>*Race*
--
+ track: Track
+ runners: Mouse[ ] 
--
+__init__(track: Track, runners: Mouse[ ]): None\
+ get_runners(): Mouse[ ]
+ get_track(): Track
+ start_race(): float[ ]
+ show_full_stats(): None
+ show_random_stats(number_to_show: int): None
_+ get_winners(times: float[ ]): int[ ]_
+ show_results(times: float[ ], winners: int [ ]): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>366</x><y>288</y><w>42</w><h>24</h></coordinates><panel_attributes>*Track*
--
+ track_type: str
+ distance: int
--
+ get_track_type(): str
+ get_distance(): int
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>502</x><y>390</y><w>44</w><h>16</h></coordinates><panel_attributes>*Croupier*
--
--
+ croupier_bet: None
+ croupier_match(last_bet: int): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>492</x><y>538</y><w>20</w><h>6</h></coordinates><panel_attributes>Rank</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>492</x><y>550</y><w>20</w><h>6</h></coordinates><panel_attributes>Suit</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>442</x><y>516</y><w>42</w><h>24</h></coordinates><panel_attributes>*Deck*
--
card_list: tuple[ ]
--
+ shuffle(): None
+ is_empyt(): bool
+ draw(n: int): tuple[ ] </panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>514</x><y>492</y><w>42</w><h>38</h></coordinates><panel_attributes>*Hand*
--
+ cards: tuple[ ]
--
+ add_cards(cards: tuple[ ]): None
+ is_one_color(): bool
+ is_straight(): bool
+ is_five(): bool
+ rank(): str
+ show_hand(): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>540</x><y>434</y><w>54</w><h>38</h></coordinates><panel_attributes>*Poker*
--
+ player: Player
+ poker_player: Poker_human
+ croupier: Croupier
+ bet_money: int
+ last_bet: int
--
+__init__(player: Player): None
+ bet(player: bool, all_in: bool) -&gt; None
+ match(player: bool): None
+ fold(player: bool): None
+ winner(): Poker_human/Croupier</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>502</x><y>412</y><w>42</w><h>12</h></coordinates><panel_attributes>*Poker_human*
--
--
+ players_bet(tokens: int): bool/str</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>426</x><y>396</y><w>52</w><h>26</h></coordinates><panel_attributes>*Poker_player*
--
+ hand: Hand
+ hand_rank: None/str
--
+ __init__(nams: str, money: int): None
+ draw_cards(tuple[ ]): None
+ rank(): None
+ show_player_hand(): None</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>468</x><y>448</y><w>42</w><h>38</h></coordinates><panel_attributes>*Poker_Game*
--
+ poker_player: Player
+ deck: Deck
+ poker: Poker
--
+__init__(player: Player): None
+ round_one(): None
+ action(): None/str
+ round_two(): None
+ final(): None
+ start_game(): None
_+ end_game(): None_</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>568</x><y>480</y><w>52</w><h>54</h></coordinates><panel_attributes>*Winners*
--
+ player1: Poker_player
+ hand1: tuple[ ]
+ player2: Poker_player
+ hand2: tuple[ ]
--
+ winner_high_card(): Poker_player
+ winner_pair(): Poker_player
_+ find_high_card(hand: Hand): tuple_
+ winner_two_pairs(): Poker_player
+ winner_three_of_a_kind(): Poker_player
+ winner_straight(): Poker_player
+ winner_flush(): Poker_player
+ winner_full_house(): Poker_player
+ winner_four_of_a_kind(): Poker_player
+ winner_straigh_flush(): Poker_player
+ winner_royal_flush(): str</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>492</x><y>192</y><w>52</w><h>38</h></coordinates><panel_attributes>*Bet*
--
+ weight: int
+ options: int[ ]
--
+__init__(weight: int, options: int[ ]): None
+ is_option_ok(option: int): bool
+ correct_option(option: int): int
+ winner_prize(tokens: int): int</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>500</x><y>248</y><w>42</w><h>20</h></coordinates><panel_attributes>*Dozens*
--
+ option: int
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>554</x><y>230</y><w>42</w><h>20</h></coordinates><panel_attributes>*Eighteens*
--
+ option: int
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>552</x><y>266</y><w>42</w><h>20</h></coordinates><panel_attributes>*EvenOdd*
--
+ option: int
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>502</x><y>278</y><w>42</w><h>26</h></coordinates><panel_attributes>*FourNumbers*
--
+ option: int[ ]
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool
+ is_option_ok(option: int[ ]): bool
+ correst_option(option: int[ ]): int[ ]</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>554</x><y>196</y><w>42</w><h>20</h></coordinates><panel_attributes>*OneNumber*
--
+ option: int
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>552</x><y>292</y><w>42</w><h>26</h></coordinates><panel_attributes>*ThreeNumbers*
--
+ option: int[ ]
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool
+ is_option_ok(option: int[ ]): bool
+ correst_option(option: int[ ]): int[ ]</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>504</x><y>316</y><w>42</w><h>26</h></coordinates><panel_attributes>*TwoNumbers*
--
+ option: int[ ]
--
+ __init__(option: int): None
+ is_in_bet(number: int): bool
+ is_option_ok(option: int[ ]): bool
+ correst_option(option: int[ ]): int[ ]</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>444</x><y>252</y><w>42</w><h>38</h></coordinates><panel_attributes>&lt;&lt;Stereotype&gt;&gt;
Package::FatClass
{Some Properties}
--
-id: Long {composite}
_-ClassAttribute: Long_
--
#Operation(i: int): int
/+AbstractOperation()/
--
Responsibilities
-- Resp1
-- Resp2</panel_attributes><additional_attributes></additional_attributes></element></diagram>